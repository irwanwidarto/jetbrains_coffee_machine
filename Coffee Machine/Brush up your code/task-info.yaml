type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: "# Write your code here\nimport math\n\n# lines = [\"Starting to make a coffee\"\
    ,\n# \"Grinding coffee beans\",\n# \"Boiling water\",\n# \"Mixing boiled water\
    \ with crushed coffee beans\",\n# \"Pouring coffee into the cup\",\n# \"Pouring\
    \ some milk into the cup\",\n# \"Coffee is ready!\"]\n\n# for line in lines:\n\
    #     print(line)\n\n# print(\"Write how many ml of water the coffee machine has:\"\
    )\n# w = int(input())\n\n# print(\"Write how many ml of milk the coffee machine\
    \ has:\")\n# m = int(input())\n\n# print(\"Write how many grams of coffee beans\
    \ the coffee machine has:\")\n# b = int(input())\n\n# print(\"Write how many cups\
    \ of coffee you will need:\")\n# c = int(input())\n\n# mw = math.floor(w / 200)\n\
    # mm = math.floor(m / 50)\n# mb = math.floor(b / 15)\n# mc = min([mw, mm, mb])\n\
    \n# if mc == c:\n#     print(\"Yes, I can make that amount of coffee\")\n# elif\
    \ mc < c:\n#     print(\"No, I can make only {N} cups of coffee\".format(N=mc))\n\
    # elif mc > c:\n#     print(\"Yes, I can make that amount of coffee (and even\
    \ {N} more than that)\".format(N=(mc - c)))\n    \n\n# print(\"For {cups} of coffee\
    \ you will need:\".format(cups=c))\n# print(c * 200, \"ml of water\")\n# print(c\
    \ * 50, \"ml of milk\")\n# print(c * 15, \"g of coffee beans\")\n\nwater = 400\n\
    milk = 540\nbeans = 120\ncups = 9\nmoney = 550\n\ndef check(w, m, b):\n    global\
    \ water\n    global milk\n    global beans\n    global cups\n    global money\n\
    \n    if water < w:\n        print(\"Sorry, not enough water!\")\n        return\
    \ False\n    elif milk < m:\n        print(\"Sorry, not enough milk!\")\n    \
    \    return False\n    elif beans < b:\n        print(\"Sorry, not enough coffee\
    \ beans!\")\n        return False\n    elif cups < 1:\n        print(\"Sorry,\
    \ not enough cups!\")\n        return False\n    else:\n        cups -= 1\n  \
    \      print(\"I have enough resources, making you a coffee!\")\n        return\
    \ True\n           \n\ndef buy():\n    global water\n    global milk\n    global\
    \ beans\n    global cups\n    global money\n    \n    print(\"\\nWhat do you want\
    \ to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\")\n    ba = input()\n    \n\
    \    if ba == '1' and check(250, 0, 16):\n        water -= 250\n        beans\
    \ -= 16\n        money += 4\n    elif ba == '2' and check(350, 75, 20):\n    \
    \    water -= 350\n        beans -= 20\n        milk -= 75\n        money += 7\n\
    \    elif ba == '3' and check(200, 100, 12):\n        water -= 200\n        beans\
    \ -= 12\n        milk -= 100\n        money += 6\n\ndef fill():\n    global water\n\
    \    global milk\n    global beans\n    global cups\n    \n    print(\"\\nWrite\
    \ how many ml of water do you want to add:\")\n    aw = int(input())\n    water\
    \ += aw\n    \n    print(\"Write how many ml of milk do you want to add:\")\n\
    \    am = int(input())\n    milk += am\n    \n    print(\"Write how many grams\
    \ of coffee beans do you want to add:\")\n    ab = int(input())\n    beans +=\
    \ ab\n    \n    print(\"Write how many disposable cups of coffee do you want to\
    \ add:\")\n    ac = int(input())\n    cups += ac\n\ndef take():\n    global money\n\
    \    \n    print(\"\\nI gave you ${money}\".format(money=money))\n    money =\
    \ 0\n\ndef remaining():\n    if money == 0:\n        ccy = ''\n    else:\n   \
    \     ccy = '$'\n    print(\"\\nThe coffee machine has:\")\n    print(\"{water}\
    \ of water\".format(water=water))\n    print(\"{milk} of milk\".format(milk=milk))\n\
    \    print(\"{beans} of coffee beans\".format(beans=beans))\n    print(\"{cups}\
    \ of disposable cups\".format(cups=cups))\n    print(\"{ccy}{money} of money\"\
    .format(ccy=ccy, money=money))\n\ndef main():\n    print(\"\\nWrite action (buy,\
    \ fill, take, remaining, exit):\")\n    action = input()\n\n    if action == 'buy':\n\
    \        buy()\n    elif action == 'fill':\n        fill()\n    elif action ==\
    \ 'take':\n        take()\n    elif action == 'remaining':\n        remaining()\n\
    \    elif action == 'exit':\n        exit()\n\nwhile 1 == 1:\n    main()\n    "
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: 5
